---
import { Picture } from 'astro:assets';
import { heroSlides, roles } from '~/data/home';
import { clientSlides } from '~/data/clients';
import SwiperHome from '~/components/Swiper/Home.astro';
import SplashLayout from '~/layouts/SplashLayout.astro';
import WorkCard from '~/components/work/WorkCard.astro';
import Button from '~/components/preact/Button.tsx';
import { Icon } from 'astro-icon/components';
import Roles from '~/components/Roles.astro';
import SwiperClients from '~/components/Swiper/Clients.astro';
import Clients from '~/components/marquees/Clients.astro';
import ScrollPrompt from '~/components/ui/ScrollPrompt.astro';

const title = 'Home';
const heroConfig = {
    dark: true,
};

import ogImage from '~/assets/og/og__home.jpg';

const og = {
    title: 'About Pete Wallace',
    description:
        'Pete Wallace is an experienced Front-End developer based in Surrey, UK. Get to know more about my experience in the digital landscape, how I keep my skills sharp, and the methods I prefer to use to produce my best work.',
    image: {
        src: ogImage,
        alt: 'ByPete Homepage',
    },
};

import heatmap from '~/assets/hero/heatmap__right-center.png';

import { formatBlogPosts } from '~/js/utils';
import { getCollection, render } from 'astro:content';
const allWork = await getCollection('work');

const formattedPosts = formatBlogPosts(allWork, {
    filterOutDrafts: true,
    filterOutFuturePosts: true,
    sortByDate: true,
    limit: 5,
});
---

<SplashLayout title={title} isHeroDark={heroConfig.dark} {og}>
    <section
        class="relative origin-top items-center overflow-x-hidden bg-primary bg-cover pb-fluid-6xl angleclip-fluid-3xl [&+*]:-mt-fluid-6xl"
    >
        <div class="absolute inset-0 h-full w-full">
            <Picture
                src={heatmap}
                quality={'max'}
                loading={'eager'}
                formats={['avif', 'webp']}
                alt="Purple gradient background"
                class="absolute h-full w-full object-cover object-bottom md:object-center"
            />
            <div
                id="particleField"
                class="absolute inset-0 h-full w-full overflow-hidden"
            >
            </div>
        </div>

        <div
            class="relative container mx-auto grid h-svh w-full grid-rows-(--gtr-home) items-center pt-headerheight not-dynamic:h-screen lg:grid-cols-(--gtc-home) lg:grid-rows-1"
        >
            <div class="w-full max-w-[40ch] pt-fluid-xl md:p-0">
                <Roles roles={roles} />
                <p
                    class="text-shadow-emboss my-fluid-s text-step-0 text-content-light shadow-slate-900"
                >
                    Discover the stories behind my projects, the challenges
                    addressed, and the solutions crafted.
                </p>
                <p
                    class="text-shadow-none flex flex-wrap items-center gap-fluid-xs"
                >
                    <Button
                        theme="primary"
                        isIcon={true}
                        class="md:inline-flex"
                        href="/work/"
                    >
                        View the portfolio <Icon
                            name="lucide:arrow-right-circle"
                            class="h-fluid-s w-fluid-s animate-nudge-right"
                        />
                    </Button>
                    <Button href="/about/" theme="whiteline">Read my bio</Button
                    >
                </p>
            </div>

            <div class="relative flex h-full w-full items-center">
                <SwiperHome slides={heroSlides} />
            </div>
        </div>
        <div
            class="pointer-events-none absolute top-[100svh] left-1/2 z-100 -translate-x-1/2 -translate-y-full pb-fluid-s text-content-light not-dynamic:top-[100vh]"
        >
            <ScrollPrompt />
        </div>
    </section>

    <section id="featured" class="from-page-contrast bg-linear-to-b pb-fluid-s">
        <div class="relative container mx-auto">
            <h2
                class="m-0 text-center font-headline text-step-4 font-bold tracking-tight text-content-light"
            >
                Featured work
            </h2>
            <div
                class="my-fluid-m grid grid-cols-1 gap-fluid-xl md:grid-cols-2 lg:grid-cols-3"
            >
                {
                    formattedPosts.map(async (post) => {
                        const { remarkPluginFrontmatter } = await render(post);
                        const featured = post.data.tags.includes('featured');
                        return (
                            <WorkCard
                                url={`/${post.collection}/${post.id}/`}
                                title={post.data.title}
                                taster={post.data.taster}
                                tags={post.data.tags}
                                cover={post.data.cover}
                                logo={post.data.logo}
                                product={post.data.product}
                                readTime={remarkPluginFrontmatter.minutesRead}
                                featured={featured}
                            />
                        );
                    })
                }

                <div animate-card class="self-center">
                    <span
                        class="i-lucide-folder-archive h-fluid-l w-fluid-l animate-pulse"
                    ></span>
                    <h2 class="mt-0 text-step-2">Want to see more...?</h2>
                    <p class="mb-fluid-s">
                        A complete list of case studies can be found in the <strong
                            >Work</strong
                        > section.
                    </p>
                    <p>
                        <Button
                            theme="primary"
                            isIcon={true}
                            class="md:inline-flex"
                            href="/work/"
                        >
                            Explore the collection <Icon
                                name="lucide:arrow-right-circle"
                                class="h-fluid-s w-fluid-s animate-nudge-right"
                            />
                        </Button>
                    </p>
                </div>
            </div>
        </div>
    </section>
    <div class="relative container mx-auto py-fluid-2xl">
        <h3
            class="mb-fluid-s text-center text-step-1 font-bold text-content-quiet"
        >
            Some of the brands I've worked with:
        </h3>
        <Clients clients={clientSlides} />
    </div>
</SplashLayout>
<script>
    import { inView, animate, stagger, type AnimationSequence } from 'motion';

    const { body, documentElement: page } = document;
    const viewWidth = window.innerWidth || page.clientWidth;
    const viewHeight = window.innerHeight || page.clientHeight;
    const featured = document.getElementById('featured');
    const particleField = document.querySelector('#particleField');

    if (featured != null) {
        viewWidth <= 768
            ? inView(
                  '[animate-card]',
                  (element) => {
                      animate(
                          element,
                          { opacity: [0, 1], y: ['40px', '0'] },
                          { delay: 0.25, duration: 0.75 }
                      );
                  },
                  { margin: '0%' }
              )
            : inView(
                  featured,
                  (element) => {
                      animate(
                          element.querySelectorAll('[animate-card]'),
                          { opacity: [0, 1] },
                          { duration: 0.25, delay: stagger(0.15) }
                      );
                  },
                  { margin: '-20%' }
              );
    }

    // Function to create particles
    const createParticles = () => {
        const amount = viewWidth <= 768 ? 80 : 240;
        const range = viewWidth <= 768 ? 4 : 5;

        if (particleField) {
            for (let i = 0; i < amount; i += 1) {
                const particle = document.createElement('div');
                particle.className = 'particle absolute bg-white rounded-full ';

                // Set initial position within the visible area
                const initialX = Math.random() * viewWidth;
                const initialY = Math.random() * viewHeight;
                const opacity = (Math.random() * 0.25).toFixed(2);
                // Set initial size with some variation
                const size = Math.floor(Math.random() * range) + 1; // Random size between 1 and {range} pixels
                particle.style.opacity = `${opacity}`;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;

                particle.style.left = `${initialX}px`;
                particle.style.top = `${initialY}px`;

                particleField.appendChild(particle);
            }
        }
    };

    let animationInProgress = false;
    let shootTimer: boolean | null = null;

    const wait = (ms = 0) => {
        return new Promise((resolve) => setTimeout(resolve, ms));
    };

    const handleParticles = async (interval: number) => {
        if (shootTimer) {
            return;
        }

        shootTimer = true;
        while (shootTimer) {
            if (!animationInProgress) {
                shootParticle();
            }
            await wait(interval);
        }
    };

    const shootParticle = () => {
        animationInProgress = true;
        const particles = document.querySelectorAll('.particle');
        const randomIndex = Math.floor(Math.random() * particles.length);
        const randomParticle = particles[randomIndex];

        const vectorA = Math.random() * 0.5 * Math.max(viewWidth, viewHeight);
        const vectorB =
            Math.random() * 0.5 * Math.min(window.innerWidth, viewHeight);
        const directionX = Math.random() > 0.5 ? 1 : -1; // Randomly choose left or right direction
        const directionY = Math.random() > 0.5 ? 1 : -1; // Randomly choose up or down direction

        const shoot: AnimationSequence = [
            [
                randomParticle,
                {
                    x: [0, `${vectorA * directionX}px`],
                    y: [0, `${vectorB * directionY}px`],
                    scale: [1, 1.5, 1],
                    opacity: [1, 0.25, 0],
                },
                { duration: 2.75 },
            ],
            [randomParticle, { x: 0, y: 0 }],
            [
                randomParticle,
                {
                    opacity: [0, Math.random() * 0.25],
                },
                { duration: 0.25, delay: 2 },
            ],
        ];
        animate(shoot).then(() => {
            animationInProgress = false;
        });
    };

    // Function to restart animation on screen size change
    const restartAnimationOnResize = () => {
        if (particleField) {
            particleField.innerHTML = ''; // Clear existing particles
        }
        createParticles();
        handleParticles(1200); // Interval in seconds
    };

    // Initialize particle animation
    const initParticleAnimation = () => {
        createParticles();
        handleParticles(1200); // Interval in milliseconds

        let previousWidth = viewWidth;

        window.addEventListener('resize', () => {
            const currentWidth = window.innerWidth;
            if (currentWidth !== previousWidth) {
                // Width has changed, trigger your resize logic here
                restartAnimationOnResize();
                // Update the previous width
                previousWidth = currentWidth;
            }
        });
    };

    // Run the animation
    initParticleAnimation();
</script>
