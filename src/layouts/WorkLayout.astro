---
import BaseLayout from './BaseLayout.astro';
import type { Props as HeadProps } from '~/components/SEO/Main.astro';

import Tags from '~/components/ui/Tags.astro';
import Button from '~/components/preact/Button.tsx';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import Hero from '~/components/hero/Hero.astro';
import HeroPicture from '~/components/images/HeroPicture.astro';
import { readableDate, htmlDateString } from '~/js/utils.js';
import TocMenu from '~/components/preact/navigation/TocMenu';
import NextPrev from '~/components/ui/NextPrev.astro';
import BlockPicture from '~/components/images/BlockPicture.astro';
import ReadTime from '~/components/ui/ReadTime.astro';
import PageTools from '~/components/ui/PageTools.astro';

export interface Props {
    frontmatter: any;
    section: string;
    minutesRead: string;
    headings: any;
    prevPost: any;
    nextPost: any;
}

const { frontmatter, section, minutesRead, headings, prevPost, nextPost } =
    Astro.props;

const fm = frontmatter || Astro.props;
const { heroConfig = {}, class: className } = fm;
const { hideToc = false, hideBreadcrumbs = false } = fm;

const head: HeadProps = {
    title: fm.title,
    description: fm.description,
    og: fm.og,
    // Articles
    published_time: fm.pubDate,
    author: fm.author,
    section: section ?? undefined,
    tags: fm.tags,
    pageType: 'article',
};

const isHeroDark = (fm.isHeroDark || fm.heroConfig?.dark) ?? false;

const resolvedHeroConfig = {
    ...heroConfig,
    mode: heroConfig.mode || 'work',
};

// Simplify the post before passing to NextPrev component
const formatPostData = (post) => {
    const thumb = post.data.cover
        ? {
              src: post.data.cover.src,
              alt: post.data.cover.alt,
          }
        : undefined;
    const overlay = post.data.logo
        ? {
              src: post.data.logo.light || post.data.logo.src,
              alt: post.data.logo.alt,
          }
        : undefined;
    return {
        title: post.data.title,
        url: `/${post.collection}/${post.id}/`,
        excerpt: post.data.excerpt || post.data.taster || '',
        ...(thumb && { thumb }), // conditional thumbnail
        ...(overlay && { overlay }), // conditional overlay
    };
};

const nextPostData = nextPost ? formatPostData(nextPost) : undefined;
const prevPostData = prevPost ? formatPostData(prevPost) : undefined;
---

<BaseLayout head={head} {isHeroDark}>
    <main class="@container/main outline-hidden">
        <article
            id="content"
            class="layout relative grid grid-cols-(--gtc-layout)"
            data-layout="content"
        >
            <slot name="slothero">
                <Hero heroConfig={resolvedHeroConfig} title={head.title}>
                    <div
                        class="relative flex h-[75vw] items-center justify-center lg:h-full"
                    >
                        <HeroPicture
                            src={frontmatter.cover.src}
                            credit={frontmatter.title}
                            alt={frontmatter.cover.alt}
                            widths={[400, 960, frontmatter.cover.src.width]}
                            sizes={'100vw, (min-width: var(--container-width-lg)) 50vw, (min-width: 1264px) 56.25vw'}
                            class="h-full w-full object-cover"
                            wrapper={'absolute inset-0 h-full w-full '}
                        />
                        {
                            frontmatter.logo && (
                                <Image
                                    src={
                                        frontmatter.logo.light ||
                                        frontmatter.logo.src
                                    }
                                    alt={frontmatter.title + ' logo'}
                                    class="relative h-auto w-auto max-w-1/2 lg:max-w-1/3"
                                />
                            )
                        }
                    </div>
                    <div class="self-end px-fluid-m py-fluid-m md:px-fluid-xl">
                        <h1
                            class="capline text-step-3/none"
                            set:html={frontmatter.title}
                        /><ReadTime
                            duration={minutesRead}
                            class="my-fluid-2xs text-step--1 text-content-quiet"
                        />
                        <p>{frontmatter.taster}</p>
                        <div class="mt-fluid-m flex justify-between">
                            <Tags tags={frontmatter.tags} url={true} />
                        </div>
                        <p class="mt-fluid-m hidden md:block">
                            <Button
                                theme="outline"
                                isIcon={true}
                                class="inline-flex transform duration-300"
                                data-jump
                                href="#start"
                            >
                                Scroll to start <Icon
                                    name="lucide:mouse"
                                    class="h-4 w-4 animate-nudge-down"
                                />
                            </Button>
                        </p>
                    </div>
                </Hero>
            </slot>

            <div
                id="start"
                class="rte col-[full] grid grid-cols-subgrid gap-y-fluid-s"
            >
                {
                    frontmatter.product && (
                        <BlockPicture
                            src={frontmatter.product.src}
                            widths={[480, 1200]}
                            sizes={`100vw, (min-width: 75rem) 75rem`}
                            class="h-full w-full object-contain"
                            breakout={true}
                            wrapper="grid grid-cols-1 grid-rows-1 h-square md:h-block"
                            alt={frontmatter.product.alt}
                            credit={frontmatter.title}
                        />
                    )
                }
                {
                    headings && headings.length > 2 && !hideToc && (
                        <TocMenu
                            class="col-[content] my-fluid-l self-start"
                            headings={headings}
                            client:load
                        />
                    )
                }
                <slot />
            </div>
            <aside
                class="col-[content] my-fluid-2xl grid grid-cols-1 gap-fluid-s @xl/main:grid-cols-[auto_1fr]"
            >
                <p
                    class="inline-flex items-center gap-x-fluid-3xs text-step--1 text-content-quiet"
                >
                    <Icon
                        name="lucide:calendar"
                        class="inline-block h-4 w-auto"
                    />
                    <span>
                        Last updated:
                        <time
                            datetime={htmlDateString(
                                frontmatter.modDate || frontmatter.pubDate
                            )}
                            >{
                                readableDate(
                                    frontmatter.modDate || frontmatter.pubDate
                                )
                            }
                        </time>
                    </span>
                </p>
                <Tags
                    tags={frontmatter.tags}
                    url={true}
                    class="@xl/main:justify-self-end"
                />
            </aside>
        </article>
        <aside
            class="layout relative grid grid-cols-(--gtc-layout) bg-brand py-fluid-2xl text-content-dark shadow-inset shadow-brand-shade/20"
            data-layout="content"
        >
            {
                (nextPostData || prevPostData) && (
                    <NextPrev next={nextPostData} prev={prevPostData} />
                )
            }
        </aside>
        <PageTools />
    </main>
</BaseLayout>
