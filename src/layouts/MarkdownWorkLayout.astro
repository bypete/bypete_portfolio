---
import BaseLayout from './BaseLayout.astro';
import { type Props as HeadProps } from '~/components/SEO/Main.astro';

import Tags from '~/components/ui/Tags.astro';
import Button from '~/components/ui/Button.astro';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import HeroPicture from '~/components/images/HeroPicture.astro';
import { readableDate, htmlDateString } from '~/js/utils.js';
import TableOfContents from '~/components/ui/TableOfContents.astro';
import NextPrev from '~/components/ui/NextPrev.astro';
import BlockPicture from '~/components/images/BlockPicture.astro';
import ReadTime from '~/components/ui/ReadTime.astro';

export interface Props {
    frontmatter: any;
    section: string;
    minutesRead: string;
    headings: any;
    prevPost: any;
    nextPost: any;
}
const { frontmatter, section, minutesRead, headings, prevPost, nextPost } =
    Astro.props;

const fm = frontmatter || Astro.props;
const { hideToc = false, hideBreadcrumbs = false } = fm;

const head: HeadProps = {
    title: fm.title,
    description: fm.description,
    og: fm.og,
    // Articles
    published_time: fm.pubDate,
    author: fm.author,
    section: section ?? undefined,
    tags: fm.tags,
    pageType: 'article',
};

const isHeroDark =
    (fm.isHeroDark || (fm.heroConfig && fm.heroConfig.dark)) ?? false;

// Simplify the post before passing to NextPrev component
const formatPostData = (post) => {
    const thumb = post.data.cover
        ? {
              src: post.data.cover.src,
              alt: post.data.cover.alt,
          }
        : undefined;
    const overlay = post.data.logo
        ? {
              src: post.data.logo.light || post.data.logo.src,
              alt: post.data.logo.alt,
          }
        : undefined;
    return {
        title: post.data.title,
        url: `/${post.collection}/${post.id}/`,
        excerpt: post.data.excerpt || post.data.taster || '',
        ...(thumb && { thumb }), // conditional thumbnail
        ...(overlay && { overlay }), // conditional overlay
    };
};

let nextPostData = nextPost ? formatPostData(nextPost) : undefined;
let prevPostData = prevPost ? formatPostData(prevPost) : undefined;
---

<BaseLayout head={head} {isHeroDark}>
    <slot name="hero">
        <div
            class="shadow-content-dark/10 lg:not-dynamic:h-screen @min-page/page:grid-cols-(--gtc-workcontianer) relative z-10 grid w-full grid-cols-1 shadow-lg lg:h-svh lg:grid-cols-2"
        >
            <div
                class="relative flex h-[75vw] items-center justify-center lg:h-full"
            >
                <HeroPicture
                    src={frontmatter.cover.src}
                    credit={frontmatter.title}
                    alt={frontmatter.cover.alt}
                    widths={[400, 960, frontmatter.cover.src.width]}
                    sizes={'100vw, (min-width: var(--container-width-lg)) 50vw, (min-width: 1264px) 56.25vw'}
                    class="h-full w-full object-cover"
                    wrapper={'absolute inset-0 h-full w-full '}
                />
                {
                    frontmatter.logo && (
                        <Image
                            src={frontmatter.logo.light || frontmatter.logo.src}
                            alt={frontmatter.title + ' logo'}
                            class="relative h-auto w-auto max-w-1/2 lg:max-w-1/3"
                        />
                    )
                }
            </div>
            <div class="rte px-fluid-m py-fluid-m self-end">
                <h1
                    class="capline text-step-3/none"
                    set:html={frontmatter.title}
                /><ReadTime duration={minutesRead} />
                <p>{frontmatter.taster}</p>
                <div class="mt-fluid-m flex justify-between">
                    <Tags tags={frontmatter.tags} url={true} />
                </div>
                <p class="mt-fluid-m hidden md:block">
                    <Button
                        theme="outline"
                        isIcon={true}
                        class="inline-flex transform duration-300"
                        data-jump
                        href="#start"
                    >
                        Scroll to start <Icon
                            name="lucide:mouse"
                            class="animate-nudge-down h-4 w-4"
                        />
                    </Button>
                </p>
            </div>
        </div>
    </slot>

    <main id="main-content" class="pb-fluid-xl relative container mx-auto">
        <article id="start" class="relative">
            <div class="rte prose text-step-0 @container mx-auto max-w-3xl">
                {
                    frontmatter.product && (
                        <div class="h-photo not-prose bg-surface-sunken breakout md:h-block flex items-center justify-center">
                            <BlockPicture
                                src={frontmatter.product.src}
                                widths={[480, 1200]}
                                sizes={`100vw, (min-width: 75rem) 75rem`}
                                class="h-full w-full object-contain"
                                breakout={false}
                                wrapper="w-full h-full max-w-[75rem]"
                                alt={frontmatter.product.alt}
                                credit={frontmatter.title}
                            />
                        </div>
                    )
                }

                {
                    headings && headings.length > 2 && !hideToc && (
                        <TableOfContents headings={headings} />
                    )
                }
                <slot />
            </div>
            <aside class="mt-fluid-m py-fluid-m mx-auto w-full max-w-3xl">
                <p
                    class="text-step--1 text-content-quiet inline-flex items-center"
                >
                    <Icon
                        name="lucide:calendar"
                        class="inline-block h-4 w-auto"
                    />
                    <span class="mx-fluid-3xs">Last updated:</span>
                    <time
                        datetime={htmlDateString(
                            frontmatter.modDate || frontmatter.pubDate,
                        )}
                        >{
                            readableDate(
                                frontmatter.modDate || frontmatter.pubDate,
                            )
                        }
                    </time>
                </p>
                <Tags tags={frontmatter.tags} url={true} class="mt-fluid-m" />
            </aside>
        </article>
    </main>
    <aside class="bg-surface-sunken px-fluid-m py-fluid-2xl shadow-highlight">
        {
            (nextPostData || prevPostData) && (
                <NextPrev next={nextPostData} prev={prevPostData} />
            )
        }
    </aside>
</BaseLayout>
