---
import BaseLayout from './BaseLayout.astro';
import { type Props as HeadProps } from '~/components/SEO/Main.astro';

import Tags from '~/components/ui/Tags.astro';
import Button from '~/components/ui/Button.astro';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import HeroPicture from '~/components/images/HeroPicture.astro';
import { readableDate, htmlDateString } from '~/js/utils.js';
import TableOfContents from '~/components/ui/TableOfContents.astro';
import WorkPreview from '~/components/ui/WorkPreview.astro';
import BlockPicture from '~/components/images/BlockPicture.astro';
import ReadTime from '~/components/ui/ReadTime.astro';

const {
    frontmatter,
    section,
    minutesRead,
    headings,
    prevPost,
    nextPost,
    gallery,
} = Astro.props;

const fm = frontmatter || Astro.props;
const { hideToc = false, hideBreadcrumbs = false } = fm;

const head: HeadProps = {
    title: fm.title,
    description: fm.description,
    og: fm.og,
    // Articles
    published_time: fm.pubDate,
    author: fm.author,
    section: section ?? undefined,
    tags: fm.tags,
    pageType: 'article',
};

const isHeroDark =
    (fm.isHeroDark || (fm.heroConfig && fm.heroConfig.dark)) ?? false;
---

<BaseLayout head={head} {isHeroDark}>
    <slot name="hero">
        <div
            class="relative z-10 grid w-full grid-cols-1 shadow-lg shadow-content-dark/10 lg:h-screenSvh lg:grid-cols-2 conpad:grid-cols-workcontianer"
        >
            <div
                class="relative flex h-[75vw] items-center justify-center lg:h-full"
            >
                <HeroPicture
                    src={frontmatter.cover.src}
                    credit={frontmatter.title}
                    alt={frontmatter.cover.alt}
                    widths={[400, 960, frontmatter.cover.src.width]}
                    sizes={'100vw, (min-width: var(--container-width-lg)) 50vw, (min-width: 1264px) 56.25vw'}
                    class="h-full w-full object-cover"
                    wrapper={'absolute inset-0 h-full w-full '}
                />
                {
                    frontmatter.logo && (
                        <Image
                            src={frontmatter.logo.light || frontmatter.logo.src}
                            alt={frontmatter.title + ' logo'}
                            class="relative h-auto w-auto max-w-1/2 lg:max-w-1/3"
                        />
                    )
                }
            </div>
            <div class="rte self-end px-fl-space-m py-fl-space-m">
                <h1
                    class="capline text-fl-step-3/none"
                    set:html={frontmatter.title}
                /><ReadTime duration={minutesRead} />
                <p>{frontmatter.taster}</p>
                <div class="mt-fl-space-m flex justify-between">
                    <Tags tags={frontmatter.tags} url={true} />
                </div>
                <p class="mt-fl-space-m hidden md:block">
                    <Button
                        theme="outline"
                        isIcon={true}
                        class="inline-flex transform duration-300"
                        data-jump
                        href="#start"
                    >
                        Scroll to start <Icon
                            name="lucide:mouse"
                            class="h-4 w-4 animate-nudge-down"
                        />
                    </Button>
                </p>
            </div>
        </div>
    </slot>

    <main
        id="main-content"
        class="relative mx-auto max-w-container pb-fl-space-xl"
    >
        <article id="start" class="relative">
            <div class="rte prose mx-auto max-w-3xl text-fl-step-0">
                {
                    frontmatter.product && (
                        <div class="flex h-photo items-center justify-center bg-surface-sunken breakout md:h-block">
                            <BlockPicture
                                src={frontmatter.product.src}
                                widths={[480, 1200]}
                                sizes={`100vw, (min-width: 75rem) 75rem`}
                                class="h-full w-full object-contain"
                                breakout={false}
                                wrapper="w-full h-full max-w-[75rem]"
                                alt={frontmatter.product.alt}
                                credit={frontmatter.title}
                            />
                        </div>
                    )
                }

                {
                    headings && headings.length > 2 && !hideToc && (
                        <TableOfContents headings={headings} />
                    )
                }
                <slot />
            </div>
            <aside class="mx-auto mt-fl-space-m w-full max-w-3xl py-fl-space-m">
                <p
                    class="inline-flex items-center text-fl-step--1 text-content-quiet"
                >
                    <Icon
                        name="lucide:calendar"
                        class="inline-block h-4 w-auto"
                    />
                    <span class="mx-fl-space-3xs">Last updated:</span>
                    <time
                        datetime={htmlDateString(
                            frontmatter.modDate || frontmatter.pubDate,
                        )}
                        >{
                            readableDate(
                                frontmatter.modDate || frontmatter.pubDate,
                            )
                        }
                    </time>
                </p>
                <Tags
                    tags={frontmatter.tags}
                    url={true}
                    class="mt-fl-space-m"
                />
            </aside>
        </article>
    </main>
    <aside
        class="bg-surface-sunken px-fl-space-m py-fl-space-2xl shadow-highlight"
    >
        <div
            class="mx-auto grid max-w-3xl grid-cols-1 items-start justify-between gap-fl-space-l md:grid-cols-prevnext"
        >
            {
                nextPost && (
                    <WorkPreview
                        post={nextPost}
                        class="md:col-start-1"
                        preview={'next'}
                    />
                )
            }
            {
                prevPost && (
                    <WorkPreview
                        post={prevPost}
                        class="md:col-start-2"
                        preview={'prev'}
                    />
                )
            }
        </div>
    </aside>
</BaseLayout>
