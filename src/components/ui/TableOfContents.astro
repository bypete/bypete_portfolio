---
import { buildToc } from '~/js/utils';
import TableOfContentsHeading from './TableOfContentsHeading.astro';

export interface Heading {
    depth: number;
    slug: string;
    text: string;
    subheadings: Heading[];
}

interface Props {
    headings: Heading;
    class?: string;
}

const { headings, class: className } = Astro.props;
const toc = buildToc(headings);
---

<nav
    id="toc"
    x-cloak
    x-data="toc()"
    @focusin.window="! $refs.toc.contains($event.target) && close()"
    x-ref="toc"
    x-id="['panel-toc']"
    aria-label="Content sections"
    data-off-canvas-sticky
    class="sticky-root sticky -top-px z-toc my-fl-space-l flex w-full flex-row items-center justify-center"
>
    <div
        id="tocWrapper"
        class="relative mx-auto w-auto rounded-b shadow-raised"
        x-sticky.sticky-root="isStuck"
    >
        <button
            @click="toggle()"
            x-ref="tocbutton"
            aria-label="Toggle page links"
            :aria-expanded="open"
            :aria-controls="$id('panel-toc')"
            class="group flex w-full items-center justify-between gap-x-fl-space-2xs whitespace-nowrap rounded border border-line bg-surface-raised px-fl-space-s py-fl-space-2xs font-semibold"
            x-sticky.sticky-root="rounded-t-none"
            x-bind:class="open ? 'rounded-none ' : ''"
        >
            On this page <span
                class="block h-5 w-5 group-focus:ring-2"
                x-bind:class="open ? 'icon-[lucide--x-circle]': 'icon-[lucide--file-text]'"
            ></span>
        </button>

        <div class="relative z-10">
            <div
                x-cloak
                x-ref="panel"
                :id="$id('panel-toc')"
                class="absolute left-0 top-0 hidden max-h-[calc(100dvh-var(--headerheight))] w-full grow overflow-y-scroll rounded-b border border-t-0 border-line bg-surface-overlay px-fl-space-s py-fl-space-2xs opacity-0 shadow-raised"
            >
                <ol class="m-0">
                    {
                        toc.map((heading) => (
                            <TableOfContentsHeading heading={heading} />
                        ))
                    }
                </ol>
            </div>
        </div>
    </div>
</nav>
<script>
    import { timeline, type TimelineDefinition } from 'motion';

    const tocWrapper = document.getElementById('tocWrapper');
    let tocWrapperWidth;

    const toggleTocVisibility = (isOpen, target, width) => {
        if (tocWrapper) {
            const sequenceShowToc: TimelineDefinition = [
                [tocWrapper, { width: '100%' }, { duration: 0.5 }],
                [
                    target,
                    {
                        opacity: 1,
                        height: ['0px', 'auto'],
                    },
                    { duration: 0.5 },
                ],
            ];

            const sequenceHideToc: TimelineDefinition = [
                [
                    target,
                    {
                        opacity: 0,
                    },
                    { duration: 0.5 },
                ],
                [tocWrapper, { width: `${width}px` }, { duration: 0.5 }],
            ];

            if (isOpen) {
                target.classList.toggle('hidden', !isOpen);
                timeline(sequenceShowToc).finished.then(() => {});
            } else {
                timeline(sequenceHideToc).finished.then(() => {
                    target.classList.toggle('hidden', !isOpen);
                });
            }
        }
    };
    document.addEventListener('alpine:init', () => {
        Alpine.data('toc', () => ({
            open: false,
            toggle() {
                this.open = !this.open;

                if (this.open) {
                    this.$refs.tocbutton.focus();
                }
            },
            close(focusAfter) {
                if (focusAfter) {
                    focusAfter.focus();
                }
                setTimeout(() => {
                    this.open = false;
                }, 750);
            },
            init() {
                this.$watch('open', (value) => {
                    if (value) {
                        tocWrapperWidth = tocWrapper?.clientWidth;

                        if (
                            typeof tocWrapperWidth === 'number' &&
                            !isNaN(tocWrapperWidth)
                        ) {
                            tocWrapperWidth = Math.ceil(tocWrapperWidth);
                        }

                        toggleTocVisibility(
                            value,
                            this.$refs.panel,
                            tocWrapperWidth,
                        );
                    } else {
                        toggleTocVisibility(
                            value,
                            this.$refs.panel,
                            tocWrapperWidth,
                        );
                    }
                });
            },
        }));
    });
    const setCurrent: IntersectionObserverCallback = (entries) => {
        for (let entry of entries) {
            const { id } = entry.target;
            const tocHeadingEl = document.querySelector(
                `#toc a[href="#${id}"]`,
            );
            if (!tocHeadingEl) return;
            if (entry.isIntersecting) {
                document
                    .querySelectorAll('#toc a')
                    .forEach((e) => e.setAttribute('data-state', ''));
                tocHeadingEl.setAttribute('data-state', 'active');
            }
        }
    };

    const observerOption: IntersectionObserverInit = {
        rootMargin: '0px 0px -66%',
        threshold: 1,
    };
    const headingObserver = new IntersectionObserver(
        setCurrent,
        observerOption,
    );
    document
        .querySelectorAll('#main-content :is(h2,h3,h4)')
        .forEach((heading) => headingObserver.observe(heading));
</script>
