---
import type { HTMLAttributes } from 'astro/types';
import { remark } from 'remark';
import remarkHtml from 'remark-html';

interface Area {
    title: string;
    skills: string[];
    class?: string;
}

interface SkillsetProps {
    text?: string;
    icon?: string;
    shadow?: string;
    areas: Area[];
}

export interface Props extends HTMLAttributes<'div'> {
    breakout?: boolean;
    bg?: string;
    class?: string;
    skillset?: SkillsetProps;
}

const {
    breakout = false,
    class: className,
    bg = 'bg-slate-900',
    skillset,
    ...rest
} = Astro.props;

const { text, icon, shadow, areas } = skillset as SkillsetProps;

// Function to parse markdown
async function parseMarkdown(content: string) {
    const result = await remark().use(remarkHtml).process(content);
    return String(result);
}

// Pre-process all skills markdown
const processedAreas = await Promise.all(
    areas.map(async (area) => ({
        ...area,
        processedSkills: await Promise.all(
            area.skills.map((skill) => parseMarkdown(skill))
        ),
    }))
);
---

<div
    class:list={[
        'not-rte @container/skills',
        className
            ? className
            : `my-fluid-l [&+*]:mt-0 ${!breakout ? '-mx-fluid-m' : 'col-[full]'}`,
    ]}
    {...rest}
>
    <div
        class:list={[
            bg,
            text || 'text-content',
            'w-full rounded p-fluid-m shadow-inset @min-[99.9vw]/skills:rounded-none',
        ]}
    >
        <slot />
        <ul
            class:list={[
                'grid grid-cols-1 gap-fluid-m leading-normal @min-[60ch]:grid-cols-2',

                shadow || 'text-shadow-emboss shadow-black/10',
            ]}
        >
            {
                areas.map((area) => (
                    <li class:list={['list-none', area?.class]}>
                        <h3>{area.title}</h3>
                        <ul
                            class:list={[
                                'space-y-fluid-2xs leading-normal',
                                icon || '[&>li]:before:text-white!',
                            ]}
                        >
                            {area.skills.map((skill) => (
                                <li
                                    class="relative pl-fluid-m before:absolute before:top-tight before:left-0 before:i-lucide-check-circle-2 before:size-fluid-s"
                                    set:html={parseMarkdown(skill)}
                                />
                            ))}
                        </ul>
                    </li>
                ))
            }
        </ul>
    </div>
</div>
