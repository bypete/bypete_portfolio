---
import { Icon } from 'astro-icon/components';
---

<div
    class="fixed bottom-fl-space-m right-fl-space-m z-shortcuts flex flex-col items-center space-y-fl-space-2xs"
>
    <a
        id="pageTop"
        href="#top"
        data-jump
        aria-hidden="true"
        class="scroll translate-y-fl-space-2xl items-center justify-center rounded-full bg-accent p-fl-space-2xs text-white shadow-floated hover:border-black/10 hover:bg-accent-light focus:outline-none"
    >
        <Icon
            name="lucide:arrow-up-to-line"
            class="h-fl-space-m w-fl-space-m"
        />
    </a>

    <button
        class="group relative flex h-fl-space-2xl w-fl-space-2xl items-center justify-center rounded-full bg-accent p-0 shadow-floated hover:bg-accent-light focus:bg-accent-light lg:hidden"
        name="hamburger"
        type="button"
        aria-label="Mobile menu"
        :aria-label="isMobileNavOpen ? 'Close main menu' : 'Mobile menu'"
        :aria-expanded="isMobileNavOpen"
        x-data="hamburger"
        x-ref="button"
        x-on:click.prevent="toggle()"
    >
        <div class="grid justify-items-center gap-1">
            <span
                :class="isMobileNavOpen ? '-rotate-45 translate-y-2' : ''"
                class="h-1 w-5 rounded-full bg-white transition duration-1000"
            ></span>
            <span
                :class="isMobileNavOpen ? 'opacity-0' : ''"
                class="h-1 w-6 rounded-full bg-white transition duration-1000"
            ></span>
            <span
                :class="isMobileNavOpen ? 'rotate-45 -translate-y-2 ' : ''"
                class="h-1 w-5 rounded-full bg-white transition duration-1000"
            ></span>
        </div>
    </button>
</div>

<script>
    import Alpine from 'alpinejs';
    import { animate, timeline, type TimelineDefinition } from 'motion';

    import Lenis from '@studio-freight/lenis';
    const lenis = new Lenis();

    const raf = (time) => {
        lenis.raf(time);
        requestAnimationFrame(raf);
    };
    requestAnimationFrame(raf);

    const { body, documentElement: page } = document;
    const wrapperOffCanvasRight = document.getElementById(
        'wrapperOffCanvasRight',
    );
    const wrapperContent = document.getElementById('wrapperContent');
    const mobileNavigation = document.getElementById('mobileNavigation');
    const stickies = document.querySelectorAll('[data-off-canvas-sticky]');
    const pageTop = document.getElementById('pageTop');

    const vh = window.innerHeight; // Get viewport height

    const bh = Math.max(
        body.scrollHeight,
        body.offsetHeight,
        page.clientHeight,
        page.scrollHeight,
        page.offsetHeight,
    ); // Get page height

    let animationInProgress = false;
    let isPageTopVisible = false;

    // Universal throttle function
    const throttle = (func, delay) => {
        let throttleTimer;

        return function (...args) {
            // If throttle timer is not active, execute the function after the specified delay
            if (!throttleTimer) {
                throttleTimer = setTimeout(() => {
                    func.apply(this, args);
                    throttleTimer = null;
                }, delay);
            }
        };
    };

    // Function to handle page scrolling and toggle page top visibility
    const handlePageTop = () => {
        // Check if animation is already in progress, if so, return
        if (animationInProgress) {
            return;
        }
        // If page is scrolled beyond vh and page top is not visible, show it
        if (page.scrollTop > vh && !isPageTopVisible) {
            togglePageTopVisibility(true); // show
        }
        // If page is scrolled back within vh and page top is visible, hide it
        if (page.scrollTop <= vh && isPageTopVisible) {
            togglePageTopVisibility(false); // hide
        }
    };

    const togglePageTopVisibility = (visible) => {
        animationInProgress = true;
        const animationProperties = visible
            ? { opacity: 1, transform: ['translateX(0)'] }
            : {
                  opacity: 1,
                  transform: ['translateY(var(--space-2xl)) scale(0.25)'],
              };
        if (pageTop) {
            animate(pageTop, animationProperties, {
                easing: 'ease-in',
                duration: 0.25,
            }).finished.then(() => {
                animationInProgress = false;
                isPageTopVisible = visible;
            });
        }
    };

    // Throttle the handlePageTop function to improve performance
    const throttledHandlePageTop = throttle(handlePageTop, 300);

    // Add event listener to handle scroll events
    window.addEventListener('scroll', throttledHandlePageTop);

    // Offscreen Menu for smaller screens
    const sidenav = (visible, scrollCache, viewWidth) => {
        if (wrapperContent && mobileNavigation) {
            const sequenceShowOffscreen: TimelineDefinition = [
                [
                    wrapperContent,
                    {
                        transform: `${viewWidth <= 768 ? 'translateX(-85vw)' : 'translateX(-60vw)'}`,
                    },
                    {
                        duration: 0.5,
                    },
                ],
                [
                    mobileNavigation,
                    {
                        opacity: [0, 1],
                        transform: [
                            'translateX(calc(-1 * var(--space-3xl))) scale(.75)',
                            'scale(1)',
                        ],
                    },
                    { at: '<', duration: 0.25, delay: 0.25 },
                ],
            ];
            const sequenceHideOffscreen: TimelineDefinition = [
                [mobileNavigation, { opacity: 0 }, { duration: 0.25 }],
                [
                    wrapperContent,
                    {
                        transform: 'none',
                    },
                    { at: '<', duration: 0.5, delay: 0.25 },
                ],
            ];

            const manageStickies = (
                offscreen: boolean,
                scrollCache: number,
            ) => {
                offscreen ? lenis.stop() : lenis.start();
                body.classList.toggle('overflow-hidden', offscreen);
                wrapperOffCanvasRight?.classList.toggle(
                    'invisible',
                    !offscreen,
                );
                stickies.forEach((sticky: HTMLElement) => {
                    if (offscreen) {
                        const top =
                            window
                                .getComputedStyle(sticky)
                                .getPropertyValue('top') || '0';
                        const parsedTopValue = parseInt(top);

                        sticky.style.top = `${parsedTopValue + scrollCache}px`;
                    } else {
                        sticky.style.top = '';
                    }
                });
            };

            if (visible) {
                manageStickies(visible, scrollCache);
                timeline(sequenceShowOffscreen, {}).finished.then(() => {});
            } else {
                timeline(sequenceHideOffscreen, {}).finished.then(() => {
                    manageStickies(visible, scrollCache);
                    page.scrollTop = scrollCache;
                });
            }
        }
    };

    document.addEventListener('alpine:init', () => {
        Alpine.data('hamburger', () => ({
            scrollPos: 0,
            viewHeight: undefined,
            toggle() {
                this.isMobileNavOpen = !this.isMobileNavOpen;

                const themeMeta = document.querySelector(
                    'meta[name="theme-color"]',
                );
                const cache =
                    this.$store.cache.theme ||
                    themeMeta?.getAttribute('content');
                this.$store.cache.theme = cache;

                themeMeta?.setAttribute(
                    'content',
                    this.smNav ? '#ffd200' : cache,
                );
            },

            init() {
                this.$watch('isMobileNavOpen', (value: boolean) => {
                    this.viewHeight = window.innerHeight || page.clientHeight;
                    this.viewWidth = window.innerWidth || page.clientWidth;

                    if (value === true) {
                        this.scrollPos = page.scrollTop;
                        this.$store.cache.scrollHeight = this.scrollPos;
                    } else {
                        this.scrollPos = this.$store.cache.scrollHeight;
                    }

                    sidenav(value, this.scrollPos, this.viewWidth);
                });
            },
        }));
    });
</script>
