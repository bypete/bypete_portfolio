---
import { Icon } from 'astro-icon/components';
---

<div
    class="bottom-fluid-2xl space-y-fluid-xs fixed right-0 z-(--z-shortcuts) flex min-w-[64px] flex-col items-center"
    id="shortcuts"
>
    <a
        id="pageTop"
        href="#top"
        data-jump
        aria-hidden="true"
        class="scroll text-brand hover:bg-surface-raised focus:bg-surface-raised rounded-full stroke-2 p-0 backdrop-blur-xs focus:outline-hidden"
    >
        <Icon
            name="lucide:arrow-up-to-line"
            class="m-fluid-3xs h-fluid-m w-fluid-m"
        />
        <svg
            width="48"
            height="48"
            viewBox="0 0 100 100"
            class="absolute inset-0 h-full w-full -rotate-90 stroke-[4px]"
        >
            <circle
                cx="50"
                cy="50"
                r="46"
                pathLength="1"
                class="stroke-brand-dark/20 fill-transparent"></circle>
            <circle
                cx="50"
                cy="50"
                r="46"
                pathLength="1"
                class="progress stroke-brand fill-transparent"
                style="stroke-dasharray: 0, 1"></circle>
        </svg>
    </a>

    <button
        class="group bg-brand shadow-floated hover:bg-brand-dark focus:bg-brand-dark relative flex h-[64px] w-[64px] origin-right items-center justify-center self-end rounded-l-full p-0 lg:hidden"
        name="hamburger"
        id="hamburger"
        type="button"
        aria-label="Mobile menu"
        :aria-label="isMobileNavOpen ? 'Close main menu' : 'Mobile menu'"
        :aria-expanded="isMobileNavOpen"
        x-data="hamburger"
        x-ref="button"
        x-on:click.prevent="toggle()"
    >
        <div class="grid justify-items-center gap-1">
            <span
                :class="isMobileNavOpen ? '-rotate-45 translate-y-2' : ''"
                class="h-1 w-5 rounded-full bg-white transition duration-1000"
            ></span>
            <span
                :class="isMobileNavOpen ? 'opacity-0' : ''"
                class="h-1 w-6 rounded-full bg-white transition duration-1000"
            ></span>
            <span
                :class="isMobileNavOpen ? 'rotate-45 -translate-y-2 ' : ''"
                class="h-1 w-5 rounded-full bg-white transition duration-1000"
            ></span>
        </div>
    </button>
</div>

<script>
    import { scroll, animate, timeline, type TimelineDefinition } from 'motion';

    import Lenis from '@studio-freight/lenis';
    const lenis = new Lenis();

    const raf = (time) => {
        lenis.raf(time);
        requestAnimationFrame(raf);
    };
    requestAnimationFrame(raf);

    const { body, documentElement: page } = document;
    const wrapperOffCanvasRight = document.getElementById(
        'wrapperOffCanvasRight',
    );
    const shortcuts = document.getElementById('shortcuts');
    const hamburger = document.getElementById('hamburger');
    const closeMobileNav = document.getElementById('closeMobileNav');
    const wrapperContent = document.getElementById('wrapperContent');
    const mobileNavigation = document.getElementById('mobileNavigation');
    const stickies = document.querySelectorAll('[data-off-canvas-sticky]');
    const pageTop = document.getElementById('pageTop');

    const vh = window.innerHeight; // Get viewport height

    const bh = Math.max(
        body.scrollHeight,
        body.offsetHeight,
        page.clientHeight,
        page.scrollHeight,
        page.offsetHeight,
    ); // Get page height

    let animationInProgress = false;
    let isPageTopVisible = false;

    // Universal throttle function
    const throttle = (func, delay) => {
        let throttleTimer;

        return function (...args) {
            // If throttle timer is not active, execute the function after the specified delay
            if (!throttleTimer) {
                throttleTimer = setTimeout(() => {
                    func.apply(this, args);
                    throttleTimer = null;
                }, delay);
            }
        };
    };

    scroll(animate('.progress', { strokeDasharray: ['0,1', '1,1'] }));

    // Function to handle page scrolling and toggle page top visibility
    const handlePageTop = () => {
        // Check if animation is already in progress, if so, return
        if (animationInProgress) {
            return;
        }
        // If page is scrolled beyond vh and page top is not visible, show it
        if (page.scrollTop > 5 && !isPageTopVisible) {
            togglePageTopVisibility(true); // show
        }
        // If page is scrolled back within vh and page top is visible, hide it
        if (page.scrollTop <= 5 && isPageTopVisible) {
            togglePageTopVisibility(false); // hide
        }
    };

    const togglePageTopVisibility = (visible) => {
        animationInProgress = true;
        const animationProperties = visible
            ? { opacity: 1, transform: ['translateY(0) scale(1)'] }
            : {
                  opacity: 0,
                  transform: [
                      'translateY(calc(100% + var(--spacing-fluid-2xs))) scale(0)',
                  ],
              };
        if (pageTop) {
            animate(pageTop, animationProperties, {
                easing: 'ease-in',
                duration: 0.25,
            }).finished.then(() => {
                animationInProgress = false;
                isPageTopVisible = visible;
            });
        }
    };

    // Throttle the handlePageTop function to improve performance
    const throttledHandlePageTop = throttle(handlePageTop, 300);

    // Add event listener to handle scroll events
    window.addEventListener('scroll', throttledHandlePageTop);

    // Offscreen Menu for smaller screens
    const sidenav = (visible, scrollCache, viewWidth) => {
        if (
            wrapperContent &&
            mobileNavigation &&
            shortcuts &&
            hamburger &&
            closeMobileNav
        ) {
            const sequenceShowOffscreen: TimelineDefinition = [
                [
                    wrapperContent,
                    {
                        transform: `${viewWidth <= 768 ? 'translateX(calc(-100vw + 80px))' : 'translateX(-60vw)'}`,
                    },
                    {
                        duration: 0.5,
                    },
                ],
                [
                    shortcuts,
                    {
                        transform: `${viewWidth <= 768 ? 'translateX(calc(-100vw + 80px)) ' : 'translateX(-60vw) '}`,
                    },
                    { at: '<', duration: 0.5 },
                ],
                [
                    mobileNavigation,
                    {
                        opacity: [0, 1],
                        transform: [
                            'translateX(calc(-1 * var(--spacing-fluid-3xl))) scale(.75)',
                            'scale(1)',
                        ],
                    },
                    { at: '<', duration: 0.25, delay: 0.25 },
                ],
            ];
            const sequenceHideOffscreen: TimelineDefinition = [
                [mobileNavigation, { opacity: 0 }, { duration: 0.25 }],
                [
                    wrapperContent,
                    {
                        transform: 'none',
                    },
                    { at: '<', duration: 0.5, delay: 0.25 },
                ],
                [
                    shortcuts,
                    {
                        transform: 'none',
                    },
                    { at: '<', duration: 0.5, delay: 0.25 },
                ],
            ];

            const manageStickies = (
                offscreen: boolean,
                scrollCache: number,
            ) => {
                offscreen ? lenis.stop() : lenis.start();
                body.classList.toggle('overflow-hidden', offscreen);
                wrapperOffCanvasRight?.classList.toggle(
                    'invisible',
                    !offscreen,
                );
                stickies.forEach((sticky: HTMLElement) => {
                    if (offscreen) {
                        const top =
                            window
                                .getComputedStyle(sticky)
                                .getPropertyValue('top') || '0';
                        const parsedTopValue = parseInt(top);

                        sticky.style.top = `${parsedTopValue + scrollCache}px`;
                    } else {
                        sticky.style.top = '';
                    }
                });
            };

            if (visible) {
                manageStickies(visible, scrollCache);
                timeline(sequenceShowOffscreen, {}).finished.then(() => {});
            } else {
                timeline(sequenceHideOffscreen, {}).finished.then(() => {
                    manageStickies(visible, scrollCache);
                    page.scrollTop = scrollCache;
                });
            }
        }
    };

    document.addEventListener('alpine:init', () => {
        Alpine.data('hamburger', () => ({
            scrollPos: 0,
            viewHeight: undefined,
            toggle() {
                this.isMobileNavOpen = !this.isMobileNavOpen;

                const themeMeta = document.querySelector(
                    'meta[name="theme-color"]',
                );
                const cache =
                    this.$store.cache.theme ||
                    themeMeta?.getAttribute('content');
                this.$store.cache.theme = cache;

                themeMeta?.setAttribute(
                    'content',
                    this.smNav ? '#ffd200' : cache,
                );
            },

            init() {
                this.$watch('isMobileNavOpen', (value: boolean) => {
                    this.viewHeight = window.innerHeight || page.clientHeight;
                    this.viewWidth = window.innerWidth || page.clientWidth;

                    if (value === true) {
                        this.scrollPos = page.scrollTop;
                        this.$store.cache.scrollHeight = this.scrollPos;
                    } else {
                        this.scrollPos = this.$store.cache.scrollHeight;
                    }

                    sidenav(value, this.scrollPos, this.viewWidth);
                });
            },
        }));
    });
</script>
