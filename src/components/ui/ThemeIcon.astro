---
import { Icon } from 'astro-icon/components';
---

<span
    x-data="theme"
    x-cloak
    class:list={[
        'grid-col-1 grid-row-1  relative grid size-fl-space-l justify-center overflow-hidden rounded-full bg-surface-overlay text-center leading-none text-content shadow-inset transition-colors duration-[750ms] ',
    ]}
>
    <button
        id="setThemeLight"
        type="button"
        aria-label="set light theme"
        @click="theme = 'light'"
        class="col-start-1 row-start-1 flex size-fl-space-l items-center justify-center rounded-full"
        ><Icon name="lucide:sun-moon" class="h-fl-space-m-s w-fl-space-m-s" />
    </button>
    <button
        id="setThemeDark"
        type="button"
        aria-label="set dark theme"
        @click="theme = 'dark'"
        class="col-start-1 row-start-1 flex size-fl-space-l items-center justify-center rounded-full"
        ><Icon name="lucide:sun" class="h-fl-space-m-s w-fl-space-m-s" />
    </button>
</span>

<script is:inline>
    const getTheme = () => {
        return (
            localStorage.getItem('theme') ??
            (window.matchMedia('(prefers-color-scheme: dark)').matches
                ? 'dark'
                : 'light')
        );
    };

    const setTheme = (theme) => {
        document.querySelector('html')?.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
    };

    let theme = getTheme();
    setTheme(theme);
</script>

<script>
    import Alpine from 'alpinejs';
    import { timeline, type TimelineDefinition } from 'motion';

    const setThemeLight = document.getElementById('setThemeLight');
    const setThemeDark = document.getElementById('setThemeDark');

    const animateTheme = (theme) => {
        if (setThemeLight && setThemeDark) {
            const sequenceLight: TimelineDefinition = [
                [
                    setThemeLight,
                    {
                        x: ['0%', '100%'],
                        y: ['0%', '15%'],
                        rotate: ['0deg', '30deg'],
                    },
                ],
                [
                    setThemeDark,
                    {
                        x: ['-100%', '0%'],
                        y: ['15%', '0%'],
                        rotate: ['-30deg', '0deg'],
                    },
                    { at: '<' },
                ],
            ];

            const sequenceDark: TimelineDefinition = [
                [
                    setThemeDark,
                    {
                        x: ['0%', '100%'],
                        y: ['0%', '15%'],
                        rotate: ['0deg', '30deg'],
                    },
                ],
                [
                    setThemeLight,
                    {
                        x: ['-100%', '0%'],
                        y: ['15%', '0%'],
                        rotate: ['-30deg', '0deg'],
                    },
                    { at: '<' },
                ],
            ];

            const sequence = theme === 'light' ? sequenceLight : sequenceDark;
            timeline(sequence, {
                duration: 0.75,
            });
        }
    };

    document.addEventListener('alpine:init', () => {
        Alpine.data('theme', () => ({
            theme: localStorage.getItem('theme') || 'light',

            setTheme(value) {
                localStorage.setItem('theme', value);
                animateTheme(value);
                const html = document.querySelector('html');
                const meta = document.querySelector('meta[name="theme-color"]');

                html?.setAttribute('data-theme', value);
                meta?.setAttribute(
                    'content',
                    value === 'dark' ? '#1f1f28' : '#ffffff',
                );
            },

            init() {
                this.setTheme(this.theme);
                this.$watch('theme', (value) => {
                    this.setTheme(value);
                });
            },
        }));
    });
</script>
