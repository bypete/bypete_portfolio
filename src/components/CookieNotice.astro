---
import { Icon } from 'astro-icon/components';
import Button from './ui/Button.astro';
import Link from './ui/Link.astro';
import siteInfo from '~/data/site';
import Toast from './ui/Toast.astro';

type Props = Record<string, never>;

const build: string = import.meta.env.MODE;
let domain: string;

if (build === 'production') {
    domain = siteInfo.domain.live;
} else if (build === 'staging') {
    domain = siteInfo.domain.staging;
} else {
    domain = 'localhost';
}
const isSecure: boolean = ['production', 'staging'].includes(build);
---

<Toast id="toastCookie" hidden={true}>
    <div
        class="grid items-start gap-y-fl-space-xs p-fl-space-xs grid-areas-toast"
        x-data={`cookie({ domain: '${domain}', isSecure: '${isSecure}'})`}
    >
        <div class="text-fl-step--1 grid-in-message">
            <p>
                We use cookies to learn how visitors interact with our site. By
                continuing to browse you agree to the use of these cookies.
            </p>
        </div>
        <button
            type="button"
            aria-label="hide notice"
            @click="freeze(false)"
            class="-mr-fl-space-s -mt-fl-space-s rounded-full bg-warning p-fl-space-3xs text-white shadow-floated grid-in-close hover:bg-warning-shade"
        >
            <Icon name="mdi:hide" class="h-4 w-auto" />
        </button>
        <p class="flex justify-between grid-in-action">
            <Link theme="link" size="sm" href="/about/legal/#cookie-policy">
                Cookie policy
            </Link>
            <Button
                type="button"
                size="sm"
                @click="accept()"
                aria-label="Accept"
            >
                OK, continue
            </Button>
        </p>
    </div>
</Toast>

<script>
    import Alpine from 'alpinejs';
    import Cookies from 'js-cookie';
    interface Build {
        domain?: string;
        isSecure?: boolean;
    }

    import { timeline, type TimelineDefinition } from 'motion';

    const body = document.body;
    const cookie = document.getElementById('toastCookie');
    const overlay = document.getElementById('overlay');

    const toast = (visible) => {
        if (cookie && overlay) {
            const show: TimelineDefinition = [
                [
                    cookie,
                    {
                        opacity: [0, 1],
                        scale: [0.75, 1],
                    },
                ],
                [
                    overlay,
                    {
                        opacity: 1,
                    },
                    { at: '<' },
                ],
            ];
            const hide: TimelineDefinition = [
                [
                    cookie,
                    {
                        opacity: 0,
                    },
                    {},
                ],
                [
                    overlay,
                    {
                        opacity: 0,
                    },
                    { at: '<' },
                ],
            ];

            overlay.classList.toggle('hidden', !visible);
            cookie.classList.toggle('hidden', !visible);
            body.classList.toggle('!h-screenSvh', visible);

            const sequence = visible ? show : hide;

            timeline(sequence, {
                duration: 0.25,
            }).finished.then(() => {});
        }
    };

    document.addEventListener('alpine:init', () => {
        Alpine.data('cookie', (build: Build = {}) => ({
            name: 'cnotice',
            domain: build.domain,
            isSecure: build.isSecure || false,
            toastCookie: false,
            freeze(visible) {
                this.toastCookie = visible;
                toast(visible);
            },
            wait(ms = 0) {
                return new Promise((resolve) => setTimeout(resolve, ms));
            },
            init() {
                this.checkCookie();
            },
            async checkCookie() {
                if (!Cookies.get(this.name)) {
                    await this.wait(2500);
                    this.freeze(true);
                }
            },
            accept() {
                this.freeze(false);
                const config: Cookies.CookieAttributes = {
                    expires: 365,
                    path: '/',
                    secure: this.isSecure,
                    sameSite: 'strict',
                };
                if (this.isSecure && this.domain) {
                    config.domain = this.domain; // Include domain only for production or staging
                }
                Cookies.set(this.name, 'true', config);
            },
        }));
    });
</script>
