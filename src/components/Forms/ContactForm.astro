---
import Textarea from '~/components/forms/fields/Textarea.astro';
import Input from '~/components/forms/fields/Input.astro';
import Button from '~/components/ui/Button.astro';
---

<!-- https://usebasin.com/f/64b35c1258c2 -->
<div x-data="formValidate" class="not-prose h-full">
    <form
        data-astro-reload
        id="contactForm"
        x-on:submit.prevent="onSubmitData()"
        name="contact"
        x-ref="form"
        class="form"
        action="/connect/thanks/"
        method="post"
        accept-charset="UTF-8"
        enctype="multipart/form-data"
        x-bind:class="{ 'hidden' : isSent }"
    >
        <Input
            id="input_name"
            name="name"
            label="Name"
            type="text"
            required={true}
            placeholder="Enter your name and surname"
        />
        <Input
            id="input_email"
            name="email"
            type="email"
            class="mt-fl-space-m"
            label="Email address"
            required={true}
            placeholder="you@example.com"
        />
        <Textarea
            id="input_message"
            name="message"
            label="Your message"
            class="mt-fl-space-m"
            required={true}
            placeholder="Enter your name and surname"
        />

        <div class="absolute -z-10 h-0 w-0 opacity-0">
            <label class="font-medium" for="_sc">When to call?</label>
            <div class="relative">
                <input
                    tabindex="-1"
                    autocomplete="off"
                    type="text"
                    name="_sc"
                    aria-hidden="true"
                    id="_sc"
                />
            </div>
        </div>
        <div class="mt-fl-space-m">
            <Button type="submit" theme="primary">Send now</Button>
        </div>
    </form>
    <!-- <div
        x-cloak
        x-bind:class="{ 'flex items-center justify-center h-full w-full animate-appear' : isSent, 'hidden' : !isSent }"
    >
        <div class="rte w-full text-center">
            <Icon
                name="lucide:mail-check"
                class="mx-auto h-fl-space-2xl w-auto animate-fade-in-up text-green-500 duration-500"
            />
            <h3 class="text-center">Your message has been sent</h3>
            <p>Thanks for getting in touch, I'll try to respond quickly.</p>
        </div>
    </div> -->
</div>
<script>
    // import Alpine from 'alpinejs';
    import JustValidate from 'just-validate';

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('contactForm');
        if (form) {
            const validator = new JustValidate(form, {
                errorFieldCssClass: ['error'],
                errorLabelCssClass: [
                    'text-red-600',
                    'text-fl-step--1',
                    'mt-fl-space-3xs',
                ],
                successFieldCssClass: ['valid'],
                successLabelCssClass: ['valid'],
                validateBeforeSubmitting: true,
            });

            validator
                .addField(
                    '#input_name',
                    [
                        {
                            rule: 'required',
                            errorMessage: 'Please add your name',
                        },
                    ],
                    {
                        errorsContainer: '#input_name_error',
                    },
                )
                .addField(
                    '#input_email',
                    [
                        {
                            rule: 'required',
                            errorMessage: 'Please add your email',
                        },
                        {
                            rule: 'email',
                            errorMessage: 'Please check your email address',
                        },
                    ],
                    {
                        errorsContainer: '#input_email_error',
                    },
                )
                .addField(
                    '#input_message',
                    [
                        {
                            rule: 'required',
                            errorMessage: "Don't forget to add your message!",
                        },
                        {
                            validator: (value) =>
                                value !== undefined &&
                                value.trim().split(' ').length > 3,
                            errorMessage:
                                'Message should be more than 3 words.',
                        },
                    ],
                    {
                        errorsContainer: '#input_message_error',
                    },
                )
                .addField('#_sc', [
                    {
                        validator: (value) => value === '',
                    },
                ]);

            // Handle form submission

            form.addEventListener('submit', async (event) => {
                event.preventDefault();
                try {
                    // Wait for validation to complete fully
                    const isValid = await validator.revalidate(); // Using revalidate to ensure full validation
                    console.log('Validation result:', isValid);

                    if (isValid) {
                        // If form is valid, proceed to submit the form
                        const formData = new FormData(form);

                        fetch('https://usebasin.com/f/64b35c1258c2', {
                            method: 'POST',
                            headers: {
                                Accept: 'application/json',
                            },
                            // body: new URLSearchParams(formData).toString(),
                            body: formData,
                        })
                            .then(() => {
                                console.log('Form successfully submitted');
                                window.location.href =
                                    form.action || '/connect/thanks/';
                            })
                            .catch((error) => {
                                console.error('Form submission error:', error);
                            });
                    } else {
                        console.error('Validation failed');
                    }
                } catch (error) {
                    console.error('Validation or submission error:', error);
                }
            });
            // Add input validation feedback
            document.querySelectorAll('[data-form-group]').forEach((group) => {
                const input = group.querySelector('input, textarea');
                if (!input) return;

                const updateValidationUI = () => {
                    const hasError = input.classList.contains('error');
                    const hasSuccess = input.classList.contains('valid');

                    group.classList.toggle('has-error', hasError);
                    group.classList.toggle(
                        'has-success',
                        hasSuccess && !hasError,
                    );
                };

                // Watch for validation class changes
                new MutationObserver(updateValidationUI).observe(input, {
                    attributes: true,
                    attributeFilter: ['class'],
                });
            });
        }
    });
</script>
