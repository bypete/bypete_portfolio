---
import type { HeroKeys } from '~/components/hero/Hero.astro';
import Button from '~/components/ui/Button.astro';
import { Image, Picture } from 'astro:assets';
import { Icon } from 'astro-icon/components';

import ArtDirection from '../Images/ArtDirection.astro';

interface Props extends HeroKeys {}

const {
    class: ClassName,
    copy,
    actions,
    visual,
    cover,
    headline,
} = Astro.props;

---

{
    cover?.src && cover?.alt && (
        <div class="absolute inset-0 h-full w-full">
            <ArtDirection
                src={cover.src}
                artDirectives={cover.artDirectives}
                alt={cover.alt}
                loading="eager"
                class:list={[
                    cover.class
                        ? cover.class
                        : 'h-full w-full object-cover object-bottom md:object-center',
                ]}
            />
        </div>
    )
}

<div
    class="relative mx-auto grid max-w-container grid-cols-1 grid-rows-1 gap-fl-space-s pt-[var(--headerheight)] md:min-h-widescreen md:grid-cols-block50 lg:h-block lg:min-h-block 2xl:grid-cols-block33"
>
    <div class="w-full self-center" x-cloak>
        <h1
            class="relative text-fl-step-6 shadow-black/10 text-shadow-headline"
            data-animate="fadeInDown"
        >
            {headline}
        </h1>
        <div class="rte">
            <Fragment set:html={copy} />
            {
                actions && (
                    <>
                        <p
                            class="flex flex-row gap-2"
                            data-animate="fadeInDown"
                        >
                            {actions.map((action) => (
                                <Button
                                    theme={action.theme}
                                    class={action.class}
                                    href={action.href}
                                    isIcon={!!action.icon}
                                    {...(action.jump && { 'data-jump': '' })}
                                >
                                    {action.text}
                                    {action.icon && (
                                        <Icon
                                            name={action.icon}
                                            class="h-fl-space-s w-fl-space-s"
                                        />
                                    )}
                                </Button>
                            ))}
                        </p>
                    </>
                )
            }
        </div>
    </div>
    {
        visual && (
            <div
                class:list={[visual.wrapper ? visual.wrapper : 'relative']}
                data-animate="slideInRight"
            >
                { <Picture
                    src={visual.src}
                    densities={visual.densities ?? [1.5, 2]}
                    width={visual.width ?? 600}
                    class:list={[
                        visual.class
                            ? visual.class
                            : 'h-full w-full object-contain object-bottom',
                    ]}
                    alt={visual.alt ?? 'feature image'}
                    loading={'eager'}
                /> }
            </div>
        )
    }
</div>

<script>
    import { inView, timeline, type TimelineDefinition, stagger } from 'motion';

    const focus = document.querySelectorAll('[data-inview="cover"]');
    inView(
        focus,
        (info) => {
            const queryElementsByAnimation = (animation) => {
                return info.target.querySelectorAll(
                    `[data-animate="${animation}"]`,
                );
            };
            const slideInRight = queryElementsByAnimation('slideInRight');
            const fadeInDown = queryElementsByAnimation('fadeInDown');

            const sequence: TimelineDefinition = [
                [
                    slideInRight,
                    {
                        opacity: [0, 1],
                        transform: ['translateX(5%)', 'translateX(0%)'],
                    },
                    { duration: 0.75, delay: stagger(0.25) },
                ],
                [
                    fadeInDown,
                    {
                        opacity: [0, 1],
                        transform: ['translateY(-25%)', 'translateY(0%)'],
                    },
                    { duration: 0.25, delay: stagger(0.15) },
                ],
            ];
            const animation = timeline(sequence, {});

            return (leaveInfo) => animation.reverse();
        },
        { amount: 0.25 },
    );
</script>
