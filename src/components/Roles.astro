---
interface Role {
    preposition: string;
    role: string;
}

export interface Props {
    roles: Role[];
    class?: string;
}

const { roles, class: className } = Astro.props;
let stringRoles = JSON.stringify(roles);
stringRoles = stringRoles.replace(/\"/g, "'");
---

<div class={className} x-data={`roles(${stringRoles})`}>
    <h1 class="font-headline text-fl-step-2/tight">
        <span
            class="mb-fl-space-2xs block text-white shadow-black/40 text-shadow-emboss"
            >I like to <span x-text="preposition" class="text-brand"
                >work in</span
            ></span
        >
        <span
            class="relative inline-block rounded-tight bg-surface-raised px-fl-space-2xs py-fl-space-3xs text-content mix-blend-screen duration-150"
            x-cloak
        >
            <span x-text="role">Front-End Development</span><span
                class="animate-blink font-normal"
                x-text="(caret ? '|' : '')"></span>
        </span>
    </h1>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('roles', (roleArray) => ({
            roleIndex: 0,
            roleArray: [],
            role: '',
            preposition: '',
            caret: true,
            doneTypingInterval: 6000,

            init() {
                this.roleArray = roleArray;
                this.startTyping();
            },

            wait(ms = 0) {
                return new Promise((resolve) => setTimeout(resolve, ms));
            },

            getRandomBetween(
                min = 20,
                max = 150,
                randomNumber = Math.random(),
            ) {
                return Math.floor(randomNumber * (max - min) + min);
            },

            async draw(role) {
                this.role = '';
                let index = 0;

                const drawLetter = async () => {
                    this.role = role.slice(0, index);
                    index += 1;
                    const amountOfTimeToWait = this.getRandomBetween();

                    await this.wait(amountOfTimeToWait);

                    if (index <= role.length) {
                        drawLetter();
                    } else {
                        await this.wait(this.doneTypingInterval);
                        deleteLetter();
                    }
                };

                const deleteLetter = async () => {
                    this.role = this.role.slice(0, -1);
                    await this.wait(10);
                    if (this.role.length > 0) {
                        deleteLetter();
                    } else {
                        await this.wait(250);
                        this.roleIndex =
                            (this.roleIndex + 1) % this.roleArray.length;
                        this.startTyping();
                    }
                };

                drawLetter();
            },

            async startTyping() {
                const current = this.roleArray[this.roleIndex];
                this.preposition = current.preposition;
                await this.draw(current.role);
            },
        }));
    });
</script>
