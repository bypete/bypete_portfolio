---
import type { NavItem } from '~/data/navigation';
import MenuLink from '~/components/navigation/MenuLink.astro';
import MenuLinkChild from '~/components/navigation/MenuLinkChild.astro';
import { Icon } from 'astro-icon/components';

interface Props {
    items: NavItem[];
    class?: string;
    level?: number;
    currentPath?: string;
    isHeroDark?: boolean;
}

const {
    items,
    class: className,
    currentPath = Astro.url.pathname,
    isHeroDark = false,
} = Astro.props;
---

<ul x-ref="menu" class:list={['space-x-fluid-2xs flex justify-end', className]}>
    {
        items.map((item) => {
            const isActive =
                currentPath === item.url || currentPath.includes(item.url);
            return item.children?.length ? (
                <li class="has-children relative" x-data="menu">
                    <div class="flex items-center">
                        <MenuLink
                            {isActive}
                            url={item.url}
                            class="pr-fluid-l"
                            title={item.label}
                            {isHeroDark}
                        />

                        <button
                            x-on:click="toggle()"
                            x-ref="button"
                            type="button"
                            aria-label="Expand menu"
                            x-bind:aria-expanded="open"
                            x-bind:aria-controls="$id('dropdown-button')"
                            class:list={[
                                'right-fluid-3xs size-fluid-m bg-surface-raised text-content-shout absolute flex items-center justify-center rounded-full p-0 focus:ring-2 focus:outline-hidden focus:ring-inset',
                                // isActive ? currentTheme.active : currentTheme.text,
                            ]}
                        >
                            <Icon
                                name="hugeicons:arrow-down-01"
                                class="size-fluid-s"
                            />
                        </button>
                    </div>
                    <ul
                        x-cloak
                        x-ref="children"
                        class="mt-fluid-2xs absolute right-0 hidden w-auto origin-top-right opacity-0"
                        x-bind:id="$id('dropdown-button')"
                        x-on:click.outside="open && !$refs.button.contains($event.target) && close($refs.button)"
                    >
                        <div class="bg-surface-overlay shadow-overlay max-h-[calc(100vh-3rem-var(--headerheight))] min-w-50 overflow-y-scroll rounded-md">
                            {item.children.map((child) => {
                                const isActive = currentPath === child.url;
                                return (
                                    <>
                                        <li>
                                            <MenuLinkChild
                                                {isActive}
                                                url={child.url}
                                                title={child.label}
                                            />
                                        </li>
                                    </>
                                );
                            })}
                        </div>
                    </ul>
                </li>
            ) : (
                <li>
                    <MenuLink
                        {isActive}
                        url={item.url}
                        title={item.label}
                        {isHeroDark}
                    />
                </li>
            );
        })
    }
</ul>

<script>
    import { timeline, type TimelineDefinition } from 'motion';

    import Lenis from '@studio-freight/lenis';
    const lenis = new Lenis();

    const raf = (time) => {
        lenis.raf(time);
        requestAnimationFrame(raf);
    };
    requestAnimationFrame(raf);

    const { body, documentElement: page } = document;
    const underlay = document.getElementById('underlay');
    const toggleDropdownVisibility = (isOpen, children, button) => {
        if (underlay) {
            const sequenceShowDropdown: TimelineDefinition = [
                [button, { rotate: '180deg' }, { duration: 0.25 }],
                [
                    children,
                    {
                        opacity: [0, 1],
                        transform: [
                            'translateY(calc(-1 * var(--spacing-fluid-s))',
                            'translateY(0px)',
                        ],
                        height: ['0px', 'auto'],
                    },
                    { at: '<', duration: 0.25 },
                ],
                [
                    underlay,
                    {
                        opacity: 1,
                    },
                    { at: '<' },
                ],
            ];

            const sequenceHideDropdown: TimelineDefinition = [
                [button, { rotate: '0' }, { duration: 0.25 }],
                [
                    children,
                    {
                        opacity: 0,
                    },
                    { at: '<', duration: 0.25 },
                ],
                [
                    underlay,
                    {
                        opacity: 0,
                    },
                    { at: '<' },
                ],
            ];

            if (isOpen) {
                underlay.classList.toggle('hidden', !isOpen);
                timeline(sequenceShowDropdown, {}).finished.then(() => {});
            } else {
                timeline(sequenceHideDropdown, {}).finished.then(() => {
                    underlay.classList.toggle('hidden', !isOpen);
                });
            }
        }
    };

    document.addEventListener('alpine:init', () => {
        Alpine.data('menu', () => ({
            open: false,
            banner: document.getElementById('banner'),
            freeze(freezeState) {
                freezeState ? lenis.stop() : lenis.start();
                body.classList.toggle('overflow-hidden', freezeState);
                this.$refs.children.classList.toggle('hidden', !freezeState);
            },
            checkAriaExpanded() {
                const buttons = this.banner?.querySelectorAll('button');
                const expandedButtonFound = [...buttons].some(
                    (button) => button.getAttribute('aria-expanded') === 'true',
                );
                this.freeze(expandedButtonFound);
            },
            toggle() {
                this.open = !this.open;
                this.open && this.$refs.button.focus();
            },
            close(focusAfter) {
                this.open = false; // Close the children

                if (focusAfter) {
                    focusAfter.focus();
                }
            },
            init() {
                this.$watch('open', (value) => {
                    this.checkAriaExpanded();

                    toggleDropdownVisibility(
                        value,
                        this.$refs.children,
                        this.$refs.button,
                    );
                });
            },
        }));
    });
</script>
