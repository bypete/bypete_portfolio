---
import type { VisualKeys, CoverKeys } from '~/components/hero/Hero.astro';
import { Picture } from 'astro:assets';

import ArtDirection from '~/components/images/ArtDirection.astro';

interface Props {
    visual?: VisualKeys;
    cover?: CoverKeys;
    legibility?: string;
    copy?: string;
    class?: string;
}

const { class: ClassName, copy, visual, cover } = Astro.props;
---

{
    cover && (
        <div class="absolute inset-0 h-full w-full">
            <ArtDirection
                src={cover.src}
                artDirectives={cover.artDirectives}
                alt={cover.alt}
                loading="eager"
                class:list={[
                    cover.class ||
                        'h-full w-full object-cover object-bottom md:object-center',
                ]}
            />
        </div>
    )
}

<div
    class="relative container mx-auto grid grid-cols-1 gap-fluid-s pt-headerheight md:h-svh md:grid-cols-(--gtc-block50) md:not-dynamic:h-screen"
>
    <div class="w-full self-center py-fluid-xl">
        <slot />
    </div>
    {
        visual && (
            <div
                class:list={[visual.wrapper ? visual.wrapper : 'relative']}
                data-animate="slideInRight"
            >
                {
                    <Picture
                        src={visual.src as ImageMetadata}
                        densities={visual.densities ?? [1.5, 2]}
                        width={visual.width ?? 600}
                        class:list={[
                            visual.class ||
                                'h-full w-full object-contain object-bottom',
                        ]}
                        alt={visual.alt}
                        loading={'eager'}
                    />
                }
            </div>
        )
    }
</div>

<script>
    import { inView, animate, type AnimationSequence, stagger } from 'motion';

    const focus = document.querySelectorAll('[data-inview="cover"]');
    inView(
        focus,
        (el) => {
            const queryElementsByAnimation = (animation) => {
                return el.querySelectorAll(`[data-animate="${animation}"]`);
            };
            const slideInRight = queryElementsByAnimation('slideInRight');
            const turnIn = queryElementsByAnimation('turnIn');

            const sequenceIn: AnimationSequence = [
                [
                    slideInRight,
                    {
                        opacity: [0, 1],
                        transform: ['translateX(5%)', 'translateX(0%)'],
                    },
                    { duration: 0.75, delay: stagger(0.25) },
                ],
                [
                    turnIn,
                    {
                        opacity: [0, 1],
                        // transform: ['translateY(-25%)', 'translateY(0%)'],
                        transform: [
                            'perspective(200px) rotateY(25deg) translate(15%)',
                            'perspective(200px) rotateY(0deg) translate(0)',
                        ],
                    },
                    { duration: 0.25, delay: stagger(0.15) },
                ],
            ];
            animate(sequenceIn, {});

            return (leaveInfo) =>
                animate([
                    [turnIn, { opacity: 0 }, { at: 0 }],
                    [slideInRight, { opacity: 0 }, { at: '<' }],
                ]);
        },
        { amount: 0.25 }
    );
</script>
