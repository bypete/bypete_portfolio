---
import type { HTMLAttributes } from 'astro/types';
import Breadcrumbs from '~/components/ui/Breadcrumbs.astro';
import type { Props as CTALinks } from '~/components/preact/Button.tsx';
import ModePlain from '~/components/hero/ModePlain.astro';
import ModeWork from '~/components/hero/ModeWork.astro';
import ModeCover from '~/components/hero/ModeCover.astro';
import ScrollPrompt from '~/components/ui/ScrollPrompt.astro';
import SwipePrompt from '~/components/ui/SwipePrompt.astro';

type HeroTheme = {
    wrapper?: string[];
    hero?: string[];
    mandatory?: string[];
};

export interface VisualKeys {
    src: ImageMetadata;
    alt: string;
    widths?: number[];
    densities?: number[];
    width?: number;
    sizes?: string;
    url?: string;
    wrapper?: string;
    class?: string;
}

export interface ArtKeys {
    src: ImageMetadata;
    media: string;
}

export interface CoverKeys {
    src: ImageMetadata;
    artDirectives?: ArtKeys[];
    widths?: number[];
    sizes?: string;
    alt: string;
    url: string;
    wrapper?: string;
    class?: string;
}

export interface CTA extends CTALinks {
    text: string;
    jump: boolean;
    href: string;
    icon: string;
    theme:
        | 'primary'
        | 'secondary'
        | 'disco'
        | 'whiteline'
        | 'white'
        | 'outline'
        | 'quiet'
        | 'link'
        | 'disabled';
    class: string;
}

export interface HeroKeys {
    wrapper?: string;
    breadcrumbs?: boolean;
    dark?: boolean;
    bg?: string;
    headline?: string;
    mode?: 'plain' | 'cover' | 'work' | 'custom';
    class?: string;
    visual?: VisualKeys;
    copy?: string;
    cover?: CoverKeys;
    legibility: string;
    overflow?: boolean;
    actions?: CTA[];
    prompt?: 'swipe' | 'scroll';
}

export interface Props extends HTMLAttributes<'div'> {
    title: string;
    heroConfig?: Partial<HeroKeys>;
}

const { title, heroConfig = {}, ...rest } = Astro.props;
const {
    dark = false,
    wrapper = '',
    breadcrumbs = false,
    bg = '',
    mode = 'plain',
    class: ClassName = '',
    legibility,
    overflow,
    prompt,
    visual,
    cover,
    headline,
    actions,
    copy,
} = heroConfig as HeroKeys;

const color = legibility || (dark ? 'text-content-light' : 'text-content');
const heroTitle = headline || title;

const inView = {
    'data-inview': `${mode}`,
};

const heroThemes: Record<string, HeroTheme> = {
    plain: {
        hero: ['bg-surface-sunken', 'py-fluid-3xl'],
    },
    image: {
        hero: [''],
    },
    work: {
        hero: [
            'grid w-full',
            'grid-cols-1',
            'shadow-lg',
            'shadow-content-dark/10',
            'lg:h-screen',
            'lg:grid-cols-2',
            '@min-page/page:grid-cols-(--gtc-workcontianer)',
        ],
        mandatory: ['shadow-hero'],
    },
    cover: {
        hero: ['bg-surface-sunken', 'shadow-surface-sunk'],
        mandatory: ['shadow-hero'],
    },
};

const currentHero = heroThemes[mode as keyof typeof heroThemes];
const heroResult = [
    ...(ClassName ? ClassName.split(' ') : (currentHero.hero ?? [])),
    ...(currentHero.mandatory ?? []),
    overflow && 'overflow-hidden',
    color,
].filter(Boolean); // Filter out any falsey values (e.g., undefined, false)
---

<div
    id="hero"
    class:list={[
        wrapper ? wrapper : currentHero.wrapper,
        'relative z-(--z-hero) col-[full]',
    ]}
    {...mode && { 'data-mode': `${mode}` }}
>
    <div
        class:list={['relative flow-root w-full outline-hidden', heroResult]}
        {...inView}
        {...rest}
    >
        {
            mode === 'plain' && (
                <ModePlain headline={heroTitle}>
                    <slot />
                </ModePlain>
            )
        }

        {
            mode === 'cover' && (
                <>
                    <ModeCover
                        headline={heroTitle}
                        {visual}
                        {cover}
                        legibility={color}
                        {copy}
                        {actions}
                    >
                        <slot />
                    </ModeCover>
                </>
            )
        }

        {
            mode === 'work' && (
                <ModeWork headline={heroTitle}>
                    <slot />
                </ModeWork>
            )
        }

        {
            prompt && (
                <div class="pointer-events-none absolute bottom-fluid-s left-1/2 z-100 -translate-x-1/2">
                    {prompt === 'scroll' && <ScrollPrompt />}
                    {prompt === 'swipe' && <SwipePrompt />}
                </div>
            )
        }
    </div>
    {breadcrumbs && <Breadcrumbs title={title} />}
</div>
