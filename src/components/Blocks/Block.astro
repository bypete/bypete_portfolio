---
import type { HTMLAttributes } from 'astro/types';
import ModePair from '~/components/blocks/ModePair.astro';
import ScrollPrompt from '~/components/ui/ScrollPrompt.astro';
import SwipePrompt from '~/components/ui/SwipePrompt.astro';

export interface Props extends HTMLAttributes<'div'> {
    wrapper?: string;
    grid?: string;
    flex?: string;
    dark?: boolean;
    bg?: string;
    mode?: 'plain' | 'pair' | 'image' | 'custom';
    class?: string;
    legibility?: string;
    isContained?: boolean;
    prompt?: 'swipe' | 'scroll';
    breakout?: boolean;
}

const {
    dark = false,
    wrapper = '',
    grid = '',
    bg = '',
    mode = 'plain',
    class: ClassName = '',
    legibility,
    isContained,
    prompt,
    breakout,
    ...rest
} = Astro.props;

const color = legibility || (dark ? 'text-white' : 'text-slate-800');
let wrapperClass = '';

switch (mode) {
    case 'plain':
        wrapperClass = `${wrapper || ''} `;
        break;
    case 'pair':
        wrapperClass = `${wrapper || ''} `;
        break;

    case 'image':
        wrapperClass = `${
            wrapper || ''
        } bg-white min-h-photo md:min-h-33vw xl:min-h-block`;
        break;
    case 'custom':
        wrapperClass = `${wrapper || ''} custom-wrapper`;
        break;
    default:
    // Handle default case, if necessary
}
---

<div
    class:list={[
        'relative w-full outline-none',
        bg ? bg : '',
        color ? color : '',
        ClassName,
        wrapperClass,
        { 'overflow-hidden': isContained },
        breakout && 'breakout',
    ]}
    {...rest}
>
    {
        mode === 'plain' && (
            <>
                <slot />
            </>
        )
    }
    {
        mode === 'pair' && (
            <>
                <ModePair grid={grid} class="relative mx-auto">
                    <slot slot="mc1" name="mc1" />
                    <slot slot="mc2" name="mc2" />
                    <slot />
                </ModePair>
            </>
        )
    }

    {
        mode === 'custom' && (
            <>
                <slot />
            </>
        )
    }

    {
        prompt && (
            <div class="pointer-events-none absolute left-1/2 top-screenSvh z-100 -translate-x-1/2 -translate-y-full pb-fl-space-s">
                {prompt === 'scroll' && <ScrollPrompt />}
                {prompt === 'swipe' && <SwipePrompt />}
            </div>
        )
    }
</div>
