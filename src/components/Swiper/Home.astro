---
import Slide from '~/components/Swiper/HomeSlide.astro';
import Next from '~/components/Swiper/Next.astro';
import Prev from '~/components/Swiper/Prev.astro';
import { type SwiperImage } from '~/data/home';
import 'swiper/css';
import 'swiper/css/pagination';

export interface Props {
    slides: SwiperImage[];
    class?: string | ImageMetadata;
}

const { slides } = Astro.props;
---

<div
    class="swiper swiper--home group x-cloak:opacity-0 h-full w-full transition-opacity duration-300"
    x-cloak
>
    <div class="swiper-wrapper not-prose not-rte flex items-center">
        {
            slides.map((slide, i) => (
                <div class="slide swiper-slide">
                    <Slide slide={slide} />
                </div>
            ))
        }
    </div>
    <Prev
        swiper="swiper--home"
        class="text-content-light left-0 hidden md:block"
    />
    <Next
        swiper="swiper--home"
        class="text-content-light right-0 hidden md:block"
    />
    <div
        class="swiper--home__pagination bottom-fluid-s! absolute z-10 mx-auto text-left lg:text-right"
    >
    </div>
</div>

<script>
    import Swiper from 'swiper';
    import {
        Navigation,
        Pagination,
        Autoplay,
        Scrollbar,
        EffectCreative,
    } from 'swiper/modules';
    import { timeline } from 'motion';

    const swiperClass = '.swiper--home';
    const swiperDom = document.querySelector(swiperClass);

    if (swiperDom !== null) {
        let swiperHome = new Swiper(swiperClass, {
            // Install modules
            modules: [
                Navigation,
                Pagination,
                Autoplay,
                Scrollbar,
                EffectCreative,
            ],
            loop: true,
            effect: 'creative',
            creativeEffect: {
                perspective: false,
                prev: {
                    opacity: 0,
                    scale: 0.4,
                },
                next: {
                    opacity: 0,
                    scale: 0.75,
                },
            },
            speed: 250,
            autoplay: {
                pauseOnMouseEnter: true,
                disableOnInteraction: false,
                delay: 7500,
            },
            navigation: {
                nextEl: `${swiperClass}__next`,
                prevEl: `${swiperClass}__prev`,
            },
            pagination: {
                el: `${swiperClass}__pagination`,
                clickable: true,
                bulletClass:
                    'cursor-pointer mx-fluid-3xs transition-all duration-300 inline-block w-fluid-2xs h-fluid-2xs border border-content-light/50 rounded-full',
                bulletActiveClass:
                    'w-fluid-s! shadow-floated bg-content-light! border-content-light!',
            },
            watchOverflow: true, // disable if only single slide
            on: {
                afterInit: () => {
                    swiperDom.removeAttribute('x-cloak');
                },
                autoplayStop: () => {
                    swiperHome.autoplay.start();
                },
                autoplayResume: () => {},
            },
        });

        swiperHome = swiperDom.swiper;
        let animationInProgress = false;

        const mountSlide = (swiperInstance) => {
            animationInProgress = true;
            const allSlides = swiperDom.querySelectorAll('.swiper-slide');
            const currentSlide =
                swiperInstance.slides[swiperInstance.activeIndex];
            const caption = currentSlide.querySelector('[data-caption]');
            const visual = currentSlide.querySelector('[data-visual]');

            const sequenceIn = [
                [
                    visual,
                    {
                        opacity: [0, 1],
                    },
                    {
                        duration: 0.25,
                        easing: [0.17, 0.55, 0.55, 1],
                    },
                ],
                [
                    caption,
                    { opacity: [0.85, 1], scale: [0, 1.1, 1] },
                    { duration: 0.25 },
                ],
            ];

            timeline(sequenceIn, {
                easing: 'ease-in-out',
            }).finished.then(() => {
                animationInProgress = false;
            });
        };

        if (swiperHome && !swiperHome.destroyed) {
            mountSlide(swiperHome);
        }

        swiperHome.on('slideChangeTransitionStart', () => {
            animationInProgress = true;
            mountSlide(swiperHome);
        });
    }
</script>
