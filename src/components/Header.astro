---
import { Icon } from 'astro-icon/components';
import Navigation from './Navigation.astro';
import ThemeIcon from './ThemeIcon.astro';

interface Props {
    isHeroDark: boolean;
}
const { isHeroDark = false } = Astro.props;
---

<header
    id="banner"
    class="group fixed top-0 z-banner w-full py-fl-space-s opacity-0 shadow-banner shadow-gray-950/10 group-data-start/page:shadow-none"
    x-cloak
    data-off-canvas-sticky
>
    <div class="mx-auto flex max-w-container items-center gap-x-fl-space-m">
        <div class="logo flex flex-1 justify-start">
            <a
                href="/"
                x-cloak
                aria-label="byPete - home"
                class="grid h-fl-space-l w-auto grid-cols-1 grid-rows-1"
            >
                {
                    isHeroDark ? (
                        <>
                            <span class="col-start-1  group-data-up/page:opacity-0">
                                <Icon
                                    name="bypete__white"
                                    class="h-fl-space-l w-auto"
                                />
                            </span>
                            <span class="col-start-1 opacity-0 group-data-up/page:opacity-100 ">
                                <Icon
                                    name="bypete__brand"
                                    class="h-fl-space-l w-auto"
                                />
                            </span>
                        </>
                    ) : (
                        <Icon
                            name="bypete__brand"
                            class="h-fl-space-l w-auto"
                        />
                    )
                }
            </a>
        </div>

        <ThemeIcon />
        <Navigation class="hidden flex-1 lg:block" {isHeroDark} />
    </div>
</header>

<script>
    import { animate, timeline, type TimelineDefinition } from 'motion';

    const page = document.documentElement;
    const banner = document.querySelector('#banner');
    const toc = document.querySelector('#toc');
    const tocWrapper = document.querySelector('#tocWrapper');

    const vh = window.innerHeight;

    let animationInProgress = false;
    let visible = true;
    let tocShift = false;
    let throttleTimer: boolean | null = null;

    let scrollCache = 0;

    const wait = (ms = 0) => {
        return new Promise((resolve) => setTimeout(resolve, ms));
    };

    const handleBanner = async (interval: number) => {
        if (throttleTimer) {
            return;
        }

        throttleTimer = true;

        while (throttleTimer) {
            if (!animationInProgress) {
                const st = page.scrollTop;
                let tocRect;
                let isTocSticky;
                if (toc) {
                    tocRect = toc.getBoundingClientRect();
                    isTocSticky = tocRect.top <= 0;
                }
                !isTocSticky && tocShift && unstickToc();
                if (st === 0) {
                    setBannerState('start');
                    startBanner();
                } else if (st > scrollCache && visible) {
                    toggleBanner(false, isTocSticky);
                } else if (st < scrollCache && st > vh * 0.5 && !visible) {
                    toggleBanner(true, isTocSticky);
                }

                scrollCache = st <= 0 ? 0 : st; // For Mobile or negative scrolling
            }
            await wait(interval);
        }
    };

    const setBannerState = (state) => page?.setAttribute('data-banner', state);
    const unstickToc = () => {
        animationInProgress = true;

        if (tocWrapper) {
            animate(
                tocWrapper,
                { transform: ['translateY(0%)'] },
                { duration: 0.5 },
            ).finished.then(() => {
                tocShift = false;
                animationInProgress = false;
            });
        }
    };

    const startBanner = () => {
        animationInProgress = true;
        visible = true;
        if (banner) {
            animate(
                banner,
                {
                    opacity: 1,
                    transform: ['translateY(0)'],
                    background: 'none',
                },
                { easing: 'ease-in-out', duration: 0.25 },
            ).finished.then(() => {
                animationInProgress = false;
            });
        }
    };

    const toggleBanner = (isVisible, isTocSticky) => {
        animationInProgress = true;
        const tocWrapperAnimation = isTocSticky
            ? { transform: ['translateY(var(--headerheight))'] }
            : { transform: ['translateY(0%)'] };

        if (banner) {
            const sequenceShowBanner: TimelineDefinition = [
                [
                    banner,
                    {
                        opacity: 1,
                        background: 'rgb(var(--banner-up)/1)',
                    },
                    { duration: 0 },
                ],
                [
                    banner,
                    {
                        transform: ['translateY(0)'],
                        background: 'rgb(var(--banner-up)/1)',
                    },
                ],
            ];
            if (tocWrapper) {
                sequenceShowBanner.push([
                    tocWrapper,
                    tocWrapperAnimation,
                    { at: '<' },
                ]);
            }

            const sequenceHideBanner: TimelineDefinition = [
                [
                    banner,
                    {
                        transform: ['translateY(-100%)'],
                    },
                ],
                [
                    banner,
                    {
                        background: 'none',
                    },
                ],
            ];
            if (tocWrapper) {
                sequenceHideBanner.splice(sequenceHideBanner.length - 1, 0, [
                    tocWrapper,
                    { transform: ['translateY(0%)'] },
                    { at: '<' },
                ]); //insert before banner background: none
            }

            if (isVisible) {
                setBannerState('up');
                timeline(sequenceShowBanner, {
                    duration: 0.5,
                }).finished.then(() => {
                    animationInProgress = false;
                    visible = true;
                    tocShift = isTocSticky && visible;
                });
            } else {
                timeline(sequenceHideBanner, {
                    duration: 0.5,
                }).finished.then(() => {
                    animationInProgress = false;
                    visible = false;
                    tocShift = isTocSticky && visible;
                    setBannerState('down');
                });
            }
        }
    };

    handleBanner(150); // Init the banner
    window.addEventListener('scroll', () => handleBanner(150));
</script>
